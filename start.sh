#!/bin/bash

echo "üöÄ Iniciando LogLineOS no Railway..."

# Configurar vari√°veis de ambiente padr√£o
export LOGLINE_PORT=${PORT:-4123}
export LOGLINE_API_PORT=${API_PORT:-8000}
export LOGLINE_WEB_PORT=${WEB_PORT:-3000}
export LOGLINE_DATA_DIR=${LOGLINE_DATA_DIR:-/app/data}
export LOGLINE_MODE=${LOGLINE_MODE:-unified}

# Criar diret√≥rios necess√°rios
mkdir -p $LOGLINE_DATA_DIR/contracts
mkdir -p $LOGLINE_DATA_DIR/registry
mkdir -p $LOGLINE_DATA_DIR/flows
mkdir -p /app/logs

echo "üìÅ Diret√≥rios criados em $LOGLINE_DATA_DIR"

# Verificar se existe bin√°rio LogLine
if [ ! -f /usr/local/bin/logline ]; then
    echo "‚ö†Ô∏è  Bin√°rio LogLine n√£o encontrado, criando simula√ß√£o..."
    # Aqui podemos baixar o bin√°rio correto ou criar um wrapper
    echo '#!/bin/bash' > /usr/local/bin/logline
    echo 'echo "LogLine simulation - Railway deployment"' >> /usr/local/bin/logline
    echo 'echo "Args: $@"' >> /usr/local/bin/logline
    chmod +x /usr/local/bin/logline
fi

# Inicializar contratos base se n√£o existirem
if [ ! -f "$LOGLINE_DATA_DIR/contracts/base.logline" ]; then
    echo "üìÑ Criando contratos base..."
    cat > "$LOGLINE_DATA_DIR/contracts/base.logline" << EOF
// Contrato base LogLineOS
contract BaseSystem {
    version: "1.0.0",
    runtime: "railway",
    
    endpoints: {
        health: "/health",
        api: "/api/v1",
        stream: "/stream"
    },
    
    policies: {
        max_concurrent_flows: 100,
        timeout_seconds: 30,
        retry_attempts: 3
    }
}
EOF
fi

# Fun√ß√£o para verificar sa√∫de dos servi√ßos
check_health() {
    echo "üîç Verificando sa√∫de dos servi√ßos..."
    
    # Verificar se as portas est√£o dispon√≠veis
    if ! netstat -tuln | grep -q ":$LOGLINE_PORT "; then
        echo "‚úÖ Porta $LOGLINE_PORT dispon√≠vel"
    else
        echo "‚ö†Ô∏è  Porta $LOGLINE_PORT j√° em uso"
    fi
}

# Iniciar servidor web de interface
start_web_server() {
    echo "üåê Iniciando servidor web na porta $LOGLINE_WEB_PORT..."
    node server.js &
    WEB_PID=$!
    echo "Web server PID: $WEB_PID"
}

# Iniciar LogLine em modo unificado
start_logline() {
    echo "‚ö° Iniciando LogLineOS..."
    
    if [ "$LOGLINE_MODE" = "unified" ]; then
        echo "üîÑ Modo unificado: Todos os servi√ßos"
        /usr/local/bin/logline --all --streaming --port $LOGLINE_PORT &
    else
        echo "üéØ Modo espec√≠fico: $LOGLINE_MODE"
        /usr/local/bin/logline $LOGLINE_MODE --port $LOGLINE_PORT &
    fi
    
    LOGLINE_PID=$!
    echo "LogLine PID: $LOGLINE_PID"
}

# Configurar signal handlers para shutdown graceful
cleanup() {
    echo "üõë Recebido sinal de parada, finalizando servi√ßos..."
    
    if [ ! -z "$LOGLINE_PID" ]; then
        kill $LOGLINE_PID 2>/dev/null
        echo "LogLine finalizado"
    fi
    
    if [ ! -z "$WEB_PID" ]; then
        kill $WEB_PID 2>/dev/null
        echo "Servidor web finalizado"
    fi
    
    exit 0
}

trap cleanup SIGTERM SIGINT

# Verificar sa√∫de inicial
check_health

# Iniciar servi√ßos
start_web_server
start_logline

echo "üéâ LogLineOS iniciado com sucesso!"
echo "üåê Web Interface: http://localhost:$LOGLINE_WEB_PORT"
echo "üîå LogLine API: http://localhost:$LOGLINE_PORT"
echo "üì° Streaming: ws://localhost:$LOGLINE_PORT/stream"

# Manter script ativo e monitorar processos
while true; do
    # Verificar se LogLine ainda est√° rodando
    if ! kill -0 $LOGLINE_PID 2>/dev/null; then
        echo "‚ö†Ô∏è  LogLine parou, reiniciando..."
        start_logline
    fi
    
    # Verificar se servidor web ainda est√° rodando
    if ! kill -0 $WEB_PID 2>/dev/null; then
        echo "‚ö†Ô∏è  Servidor web parou, reiniciando..."
        start_web_server
    fi
    
    sleep 10
done
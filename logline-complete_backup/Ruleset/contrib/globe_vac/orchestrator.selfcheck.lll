CONTRACT orchestrator.selfcheck {
  IMPORTS { bus.core as bus; sys.time; sys.math }
  PARAMS { eta_min:f64=0.80, hbv_max:f64=0.09, r99_factor_max:f64=2.2, stable_cycles:u32=5 }
  STATE { bad_cycles:u32=0, good_cycles:u32=0, degraded:bool=false }
  ENTRY loop {
    LOOP L {
      let m = bus.peek("metrics.orchestrator")
      if (m) {
        let bad = (m.Î· < eta_min) || (m.hbv > hbv_max) || (m.r99 > r99_factor_max)
        if (bad) {
          bad_cycles += 1; good_cycles = 0
          if (!degraded && bad_cycles >= 2) {
            bus.publish("control.window", { action:"self.degrade", reason:"SLO_violation", ts_ms: sys.time.now_ms() })
            degraded = true
          }
        } else {
          good_cycles += 1; bad_cycles = 0
          if (degraded && good_cycles >= stable_cycles) {
            bus.publish("control.window", { action:"self.recover", reason:"SLO_recovered", ts_ms: sys.time.now_ms() })
            degraded = false
          }
        }
      }
      SLEEP 3_000
    }
  }
}
